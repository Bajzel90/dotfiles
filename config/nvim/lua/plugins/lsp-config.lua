return {}
-- local lsp_servers = function()
-- 	local capabilities = require("cmp_nvim_lsp").default_capabilities()
-- 	local lspconfig = require("lspconfig")
--
-- 	lspconfig.marksman.setup({ capabilities = capabilities })
--
-- 	lspconfig.lua_ls.setup({
-- 		on_init = function(client)
-- 			local path = client.workspace_folders[1].name
-- 			if vim.loop.fs_stat(path .. "/.luarc.json") or vim.loop.fs_stat(path .. "/.luarc.jsonc") then
-- 				return
-- 			end
--
-- 			client.config.settings.Lua = vim.tbl_deep_extend("force", client.config.settings.Lua, {
-- 				runtime = {
-- 					-- Tell the language server which version of Lua you're using
-- 					-- (most likely LuaJIT in the case of Neovim)
-- 					version = "LuaJIT",
-- 				},
-- 				-- Make the server aware of Neovim runtime files
-- 				workspace = {
-- 					checkThirdParty = false,
-- 					library = {
-- 						vim.env.VIMRUNTIME,
-- 					},
-- 				},
-- 			})
-- 		end,
-- 		settings = {
-- 			Lua = {},
-- 		},
-- 		{ capabilities = capabilities },
-- 	})
--
-- 	-- lspconfig.pyright.setup({
-- 	-- 	-- { capabilities = capabilities },
-- 	-- 	init_options = {
-- 	-- 		settings = {
-- 	-- 			python = {
-- 	-- 				analysis = { diagnosticMode = "off", typeCheckingMode = "off" },
-- 	-- 			},
-- 	-- 		},
-- 	-- 	},
--
-- 	require("lspconfig").pyright.setup({
-- 		settings = {
-- 			pyright = {
-- 				-- Using Ruff's import organizer
-- 				disableOrganizeImports = true,
-- 			},
-- 			python = {
-- 				analysis = {
-- 					-- Ignore all files for analysis to exclusively use Ruff for linting
-- 					{ diagnosticMode = "off", typeCheckingMode = "off" },
-- 					ignore = { "*" },
-- 				},
-- 			},
-- 		},
-- 	})
--
-- 	lspconfig.gopls.setup({ capabilities = capabilities })
--
-- 	local util = require("lspconfig.util")
--
-- 	lspconfig.rust_analyzer.setup({
-- 		capabilities = capabilities,
-- 		filetytpes = { "rust" },
-- 		root_dir = util.root_pattern("Cargo.toml"),
-- 		settings = {
-- 			["rust_analyzer"] = {
-- 				cargo = {
-- 					allFeatures = true,
-- 				},
-- 			},
-- 		},
-- 	})
--
-- 	lspconfig.svelte.setup({
-- 		capabilities = capabilities,
-- 		filetytpes = { "svelte", "html" },
-- 	})
-- 	lspconfig.ts_ls.setup({
-- 		capabilities = capabilities,
-- 	})
-- 	lspconfig.ruff_lsp.setup({
-- 		capabilities = capabilities,
-- 		init_options = {
-- 			settings = {
-- 				-- Any extra CLI arguments for `ruff` go here.
-- 				args = {},
-- 			},
-- 		},
-- 	})
-- 	lspconfig.bashls.setup({ capabilities = capabilities })
-- end
--
-- local lsp_mapping = function()
-- 	vim.api.nvim_create_autocmd("LspAttach", {
-- 		group = vim.api.nvim_create_augroup("lsp-attach", { clear = true }),
-- 		callback = function(event)
-- 			-- for LSP related items. It sets the mode, buffer and description for us each time.
-- local map = function(keys, func, desc)
-- 	vim.keymap.set("n", keys, func, { buffer = event.buf, desc = "LSP: " .. desc })
-- end

-- local buildin = require("telescope.builtin")
-- map("gd", buildin.lsp_definitions, "[G]oto [D]efinition")
-- map("gr", buildin.lsp_references, "[G]oto [R]eferences")
-- map("gI", buildin.lsp_implementations, "[G]oto [I]mplementation")
-- map("<leader>D", buildin.lsp_type_definitions, "Type [D]efinition")
-- map("<leader>rn", vim.lsp.buf.rename, "[R]e[n]ame")
-- map("<leader>ca", vim.lsp.buf.code_action, "[C]ode [A]ction")
-- map("K", vim.lsp.buf.hover, "Hover Documentation")
-- map("gD", vim.lsp.buf.declaration, "[G]oto [D]eclaration")
-- 			local client = vim.lsp.get_client_by_id(event.data.client_id)
-- 			if client and client.server_capabilities.documentHighlightProvider then
-- 				vim.api.nvim_create_autocmd({ "CursorHold", "CursorHoldI" }, {
-- 					buffer = event.buf,
-- 					callback = vim.lsp.buf.document_highlight,
-- 				})
--
-- 				vim.api.nvim_create_autocmd({ "CursorMoved", "CursorMovedI" }, {
-- 					buffer = event.buf,
-- 					callback = vim.lsp.buf.clear_references,
-- 				})
-- 			end
-- 		end,
-- 	})
-- end
--
